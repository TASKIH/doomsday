{"version":3,"sources":["index.js"],"names":["NoiseRect","props","state","count","color","Konva","Util","getRandomColor","noiseOpacity","this","applyCache","rect","cache","getLayer","batchDraw","filters","Filters","Noise","noise","x","y","opacity","width","height","fill","ref","node","lastCount","worldTimer","React","Component","BlackRect","ShodowLine","line","points","polygons","stroke","strokeWidth","closed","URLImage","handleLoad","setState","image","scale","loadImage","oldProps","src","removeEventListener","window","Image","addEventListener","scaleX","scaleY","imageNode","SunnyDay","hasBlackOut","noWorldsExist","noWorldMessage","noWorldMessageRest","initialTimer","max","Math","floor","random","start","end","res","blackRects","i","timer","getRandomInt","push","tag","URL","location","searchParams","get","fetch","API_BASE_PATH","method","headers","then","json","startNoWorldMessage","widthScale","innerWidth","heightScale","innerHeight","min","timers","rects","map","e","index","generateBlackRects","maxTimer","halfTime","verts","e2","url","catch","error","intervalTimer","setInterval","update","updateNoWorldMessage","clearInterval","stop","nextMessage","nextRest","length","shift","id","class","key","polygon","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30097d45.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Stage, Layer, Rect, Line, Image } from 'react-konva';\r\nimport Konva from 'konva';\r\nimport './index.css';\r\n\r\nconst API_BASE_PATH = 'http://18.179.98.130';\r\n\r\nclass NoiseRect extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      count: this.props.count,\r\n      color: Konva.Util.getRandomColor(),\r\n      noiseOpacity: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.applyCache();\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    let lastCount = props.worldTimer - props.count;\r\n\r\n    if (props.worldTimer <= 150) {\r\n      if (state.noiseOpacity === 0) {\r\n        return null;\r\n      } else {\r\n        return {\r\n          noiseOpacity: 0,\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (lastCount <= 100) {\r\n      if (state.noiseOpacity === 1) {\r\n        return null;\r\n      } else {\r\n        return {\r\n          noiseOpacity: 1,\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  applyCache() {\r\n    this.rect.cache();\r\n    this.rect.getLayer().batchDraw();\r\n  }\r\n  render() {\r\n    return (\r\n        <Rect\r\n          filters={[Konva.Filters.Noise]}\r\n          noise={1}\r\n          x={this.props.x}\r\n          y={this.props.y}\r\n          opacity={this.state.noiseOpacity}\r\n          width={this.props.width}\r\n          height={this.props.height}\r\n          fill={this.state.color}\r\n          ref={node => {\r\n            this.rect = node;\r\n          }}\r\n        />\r\n    );\r\n  }\r\n}\r\n\r\nclass BlackRect extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      count: this.props.count,\r\n      color: 'black',\r\n      noiseOpacity: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.applyCache();\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n\r\n    let lastCount = props.worldTimer - props.count;\r\n    if (lastCount <= 0) {\r\n      if (state.noiseOpacity === 1) {\r\n        return null;\r\n      } else {\r\n        return {\r\n          noiseOpacity: 1,\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  applyCache() {\r\n    this.rect.cache();\r\n    this.rect.getLayer().batchDraw();\r\n  }\r\n  render() {\r\n    return (\r\n        <Rect\r\n          x={this.props.x}\r\n          y={this.props.y}\r\n          opacity={this.state.noiseOpacity}\r\n          width={this.props.width}\r\n          height={this.props.height}\r\n          fill={this.state.color}\r\n          ref={node => {\r\n            this.rect = node;\r\n          }}\r\n        />\r\n    );\r\n  }\r\n}\r\nclass ShodowLine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      count: props.count,\r\n      noiseOpacity: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.applyCache();\r\n  }\r\n  applyCache() {\r\n    this.line.cache();\r\n    this.line.getLayer().batchDraw();\r\n  }\r\n  static getDerivedStateFromProps(props, state) {\r\n    let lastCount = props.worldTimer - props.count;\r\n    if (lastCount <= 0) {\r\n      if (state.noiseOpacity === 1) {\r\n        return null;\r\n      } else {\r\n        return {\r\n          noiseOpacity: 1,\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  render() {\r\n    return (\r\n        <Line\r\n          points={this.props.polygons}\r\n          fill={'black'}\r\n          stroke={'black'}\r\n          strokeWidth={1}\r\n          closed={true}\r\n          opacity={this.state.noiseOpacity}\r\n          ref={node => {\r\n            this.line = node;\r\n          }}\r\n        />\r\n    );\r\n  }\r\n}\r\n\r\nclass URLImage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      image: null,\r\n      scale: props.scale,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadImage();\r\n  }\r\n  componentDidUpdate(oldProps) {\r\n    if (oldProps.src !== this.props.src) {\r\n      this.loadImage();\r\n    }\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    this.image.removeEventListener('load', this.handleLoad);\r\n  }\r\n  loadImage() {\r\n    this.image = new window.Image();\r\n    this.image.src = this.props.src;\r\n    this.image.addEventListener('load', this.handleLoad);\r\n  }\r\n  handleLoad = () => {\r\n    this.setState({\r\n      image: this.image\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <Image\r\n        image={this.state.image}\r\n        opacity={this.state.opacity}\r\n        scaleX={this.state.scale}\r\n        scaleY={this.state.scale}\r\n        ref={node => {\r\n          this.imageNode = node;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass SunnyDay extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        count: 300,\r\n        hasBlackOut: false,\r\n        noWorldsExist: false,\r\n        noWorldMessage: \"\",\r\n        noWorldMessageRest: [\"N\",\"o\",\" \",\"r\",\"e\",\"s\",\"p\",\"o\",\"n\",\"s\",\"e\",\" \",\"f\",\"r\",\"o\",\"m\",\" \",\"t\",\"h\",\"e\",\" \",\"w\",\"o\",\"r\",\"l\",\"d\",\".\",\" \",\".\",\" \",\".\"],\r\n        initialTimer: [],\r\n        scale: 1,\r\n      };\r\n  }\r\n  getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  }\r\n  generateBlackRects(start, end, count, res, scale, blackRects) {\r\n    for (let i = 0; i < count; i++) { \r\n      const timer = start + this.getRandomInt((end - start));\r\n      blackRects.push(\r\n        {\r\n          x: this.getRandomInt(res['file_width']) * scale,\r\n          y: this.getRandomInt(res['file_height']) * scale,\r\n          width: this.getRandomInt(res['file_width'] / 10 * scale) ,\r\n          height: this.getRandomInt(res['file_height'] / 10 * scale)  ,\r\n          timer: timer,\r\n        }\r\n      );\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    const url = new URL(window.location);\r\n    const tag = url.searchParams.get(\"tag\");\r\n    const IMAGE_API = API_BASE_PATH + '/api/image?tag=' + tag;\r\n\r\n    fetch(IMAGE_API, {\r\n      method: 'GET',\r\n      headers: {\r\n        \"Content-Type\": \"application/json; charset=utf-8\",\r\n        },\r\n    }).then( \r\n      res => res.json()\r\n    ).then( res => {\r\n      if(!res['file_name']) {\r\n        this.setState( {\r\n          noWorldsExist: true\r\n        });\r\n        this.startNoWorldMessage();\r\n        return;\r\n      }\r\n      res['file_name'] = res['file_name'];\r\n      let widthScale = window.innerWidth / res['file_width'] || 1;\r\n      let heightScale = window.innerHeight / res['file_height'] || 1;\r\n      const scale = Math.min(widthScale, heightScale);\r\n      const timers = [];\r\n      const maxTimer = 300;\r\n\r\n      const rects = res['points'].map((e, index) => {\r\n        timers.push(100 + this.getRandomInt(100))\r\n        return {\r\n          x: e[1] * scale,\r\n          y: e[0] * scale,\r\n          height: (e[2] - e[0]) * scale,\r\n          width: (e[3] - e[1]) * scale,\r\n        }\r\n      });\r\n      let blackRects = [];\r\n      const halfTime = maxTimer / 2;\r\n\r\n      this.generateBlackRects(halfTime, halfTime - 80, 50, res, scale, blackRects);\r\n      this.generateBlackRects(halfTime - 80, halfTime - 120, 20, res, scale, blackRects);\r\n      this.generateBlackRects(halfTime - 120, halfTime - 140, 20, res, scale, blackRects);\r\n      this.generateBlackRects(halfTime - 140, halfTime - 150, 100, res, scale, blackRects);\r\n\r\n      const verts = res['verts'].map((e, index) => {\r\n        return e.map((e2) => {\r\n          return e2 * scale;\r\n        });\r\n      });\r\n      this.setState( {\r\n        image: {\r\n          url: res['file_name'],\r\n        },\r\n        scale: scale,\r\n        timers: timers,\r\n        rects: rects,\r\n        count: maxTimer,\r\n        blackRects: blackRects,\r\n        polygons: verts\r\n      });\r\n      this.start();\r\n    }).catch(error => {\r\n      this.setState( {\r\n        noWorldsExist: true\r\n      });\r\n      this.startNoWorldMessage();\r\n      return ;\r\n    });\r\n  }\r\n  start() {\r\n    this.intervalTimer = setInterval(() => this.update(), 100)\r\n  }\r\n  startNoWorldMessage() {\r\n    this.intervalTimer = setInterval(() => this.updateNoWorldMessage(), 100);\r\n  }\r\n\r\n  stop() {\r\n    clearInterval(this.intervalTimer)\r\n  }\r\n  update () {\r\n    const count = this.state.count - 1;\r\n    let hasBlackOut = false;\r\n    let noWorldsExist = false;\r\n    if (count <= 0) {\r\n      hasBlackOut = true;\r\n      noWorldsExist = true;\r\n      this.stop();\r\n      this.startNoWorldMessage();\r\n    }\r\n    this.setState({\r\n      count: count,\r\n      hasBlackOut: hasBlackOut,\r\n      noWorldsExist: noWorldsExist\r\n    });\r\n  }\r\n  updateNoWorldMessage() {\r\n    let nextMessage = this.state.noWorldMessage;\r\n    let nextRest = this.state.noWorldMessageRest;\r\n    if (nextRest.length <= 0) {\r\n      this.stop();\r\n      return;\r\n    }\r\n\r\n    nextMessage += nextRest.shift();\r\n    this.setState({\r\n      noWorldMessage: nextMessage,\r\n      noWorldMessageRest: nextRest,\r\n    });\r\n  }\r\n  render() {\r\n    if (this.state.noWorldsExist) {\r\n      return (\r\n        <div id='error'>\r\n          <div class=\"nes-container is-dark with-title\">\r\n            <p class=\"title\">404</p>\r\n            <p>{this.state.noWorldMessage}</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let rects = [];\r\n    let blackRects = [];\r\n    let polygons = [];\r\n    if (this.state.rects){\r\n      rects = this.state.rects.map((rect, index) =>\r\n        <NoiseRect \r\n          key={'rect' + index}\r\n          x={rect.x}\r\n          y={rect.y}\r\n          width={rect.width}\r\n          height={rect.height}\r\n          count={this.state.timers[index]}\r\n          worldTimer={this.state.count}\r\n        />\r\n      );\r\n    }\r\n    if (this.state.blackRects){\r\n      blackRects = this.state.blackRects.map((rect, index) =>\r\n        <BlackRect \r\n          key={'rect' + index}\r\n          x={rect.x}\r\n          y={rect.y}\r\n          width={rect.width}\r\n          height={rect.height}\r\n          count={rect.timer}\r\n          worldTimer={this.state.count}\r\n        />\r\n      );\r\n    }\r\n    if (this.state.polygons) {\r\n      polygons = this.state.polygons.map((polygon, index) =>\r\n        <ShodowLine \r\n          key={'line' + index}\r\n          count={200}\r\n          polygons={polygon}\r\n          worldTimer={this.state.count}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <Stage width={window.innerWidth} height={window.innerHeight}>\r\n        <Layer>\r\n          {this.state.image && \r\n            <URLImage src={this.state.image.url} \r\n                      scale={this.state.scale}\r\n                      count={this.state.maxTimer}/>\r\n          } \r\n          {polygons}\r\n          {rects}\r\n          {blackRects}\r\n          <Rect x={0}\r\n                y={0}\r\n                width={window.innerWidth} \r\n                height={window.innerHeight}\r\n                opacity={this.state.hasBlackOut? 1:0}\r\n                fill={'black'}></Rect>\r\n        </Layer>\r\n      </Stage>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <SunnyDay />,\r\n  document.getElementById('root')\r\n);\r\n  "],"sourceRoot":""}